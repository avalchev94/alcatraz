// Code generated by protoc-gen-go. DO NOT EDIT.
// source: alcatraz.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type UploadRequest struct {
	// Types that are valid to be assigned to TestOneof:
	//	*UploadRequest_Chunk
	//	*UploadRequest_Metadata
	TestOneof            isUploadRequest_TestOneof `protobuf_oneof:"test_oneof"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *UploadRequest) Reset()         { *m = UploadRequest{} }
func (m *UploadRequest) String() string { return proto.CompactTextString(m) }
func (*UploadRequest) ProtoMessage()    {}
func (*UploadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_73847c5369340d2a, []int{0}
}

func (m *UploadRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadRequest.Unmarshal(m, b)
}
func (m *UploadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadRequest.Marshal(b, m, deterministic)
}
func (m *UploadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadRequest.Merge(m, src)
}
func (m *UploadRequest) XXX_Size() int {
	return xxx_messageInfo_UploadRequest.Size(m)
}
func (m *UploadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UploadRequest proto.InternalMessageInfo

type isUploadRequest_TestOneof interface {
	isUploadRequest_TestOneof()
}

type UploadRequest_Chunk struct {
	Chunk []byte `protobuf:"bytes,1,opt,name=chunk,proto3,oneof"`
}

type UploadRequest_Metadata struct {
	Metadata *Metadata `protobuf:"bytes,2,opt,name=metadata,proto3,oneof"`
}

func (*UploadRequest_Chunk) isUploadRequest_TestOneof() {}

func (*UploadRequest_Metadata) isUploadRequest_TestOneof() {}

func (m *UploadRequest) GetTestOneof() isUploadRequest_TestOneof {
	if m != nil {
		return m.TestOneof
	}
	return nil
}

func (m *UploadRequest) GetChunk() []byte {
	if x, ok := m.GetTestOneof().(*UploadRequest_Chunk); ok {
		return x.Chunk
	}
	return nil
}

func (m *UploadRequest) GetMetadata() *Metadata {
	if x, ok := m.GetTestOneof().(*UploadRequest_Metadata); ok {
		return x.Metadata
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*UploadRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*UploadRequest_Chunk)(nil),
		(*UploadRequest_Metadata)(nil),
	}
}

type Metadata struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Size                 uint64   `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Metadata) Reset()         { *m = Metadata{} }
func (m *Metadata) String() string { return proto.CompactTextString(m) }
func (*Metadata) ProtoMessage()    {}
func (*Metadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_73847c5369340d2a, []int{1}
}

func (m *Metadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Metadata.Unmarshal(m, b)
}
func (m *Metadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Metadata.Marshal(b, m, deterministic)
}
func (m *Metadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metadata.Merge(m, src)
}
func (m *Metadata) XXX_Size() int {
	return xxx_messageInfo_Metadata.Size(m)
}
func (m *Metadata) XXX_DiscardUnknown() {
	xxx_messageInfo_Metadata.DiscardUnknown(m)
}

var xxx_messageInfo_Metadata proto.InternalMessageInfo

func (m *Metadata) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Metadata) GetSize() uint64 {
	if m != nil {
		return m.Size
	}
	return 0
}

type UploadResponse struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UploadResponse) Reset()         { *m = UploadResponse{} }
func (m *UploadResponse) String() string { return proto.CompactTextString(m) }
func (*UploadResponse) ProtoMessage()    {}
func (*UploadResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_73847c5369340d2a, []int{2}
}

func (m *UploadResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadResponse.Unmarshal(m, b)
}
func (m *UploadResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadResponse.Marshal(b, m, deterministic)
}
func (m *UploadResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadResponse.Merge(m, src)
}
func (m *UploadResponse) XXX_Size() int {
	return xxx_messageInfo_UploadResponse.Size(m)
}
func (m *UploadResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UploadResponse proto.InternalMessageInfo

func (m *UploadResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *UploadResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*UploadRequest)(nil), "pb.UploadRequest")
	proto.RegisterType((*Metadata)(nil), "pb.Metadata")
	proto.RegisterType((*UploadResponse)(nil), "pb.UploadResponse")
}

func init() {
	proto.RegisterFile("alcatraz.proto", fileDescriptor_73847c5369340d2a)
}

var fileDescriptor_73847c5369340d2a = []byte{
	// 233 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0x3f, 0x4f, 0xc3, 0x30,
	0x10, 0xc5, 0x93, 0xaa, 0x40, 0x7a, 0x84, 0x4a, 0xdc, 0x80, 0x22, 0xa6, 0x2a, 0x53, 0xc4, 0x90,
	0x21, 0x0c, 0xcc, 0xfc, 0x11, 0xea, 0xc2, 0x62, 0x89, 0x19, 0x5d, 0xd2, 0x03, 0x2a, 0x12, 0xdb,
	0xf4, 0x9c, 0xa5, 0x9f, 0x1e, 0xc5, 0x8e, 0x11, 0x6c, 0xf7, 0xde, 0xd9, 0x3f, 0xbf, 0x67, 0x58,
	0x53, 0xdf, 0x91, 0x3b, 0xd0, 0xb1, 0xb6, 0x07, 0xe3, 0x0c, 0x2e, 0x6c, 0x5b, 0x12, 0x5c, 0xbc,
	0xda, 0xde, 0xd0, 0x4e, 0xf1, 0xf7, 0xc8, 0xe2, 0xf0, 0x0a, 0x4e, 0xba, 0xcf, 0x51, 0x7f, 0x15,
	0xe9, 0x26, 0xad, 0xf2, 0x6d, 0xa2, 0x82, 0xc4, 0x1b, 0xc8, 0x06, 0x76, 0xb4, 0x23, 0x47, 0xc5,
	0x62, 0x93, 0x56, 0xe7, 0x4d, 0x5e, 0xdb, 0xb6, 0x7e, 0x99, 0xbd, 0x6d, 0xa2, 0x7e, 0xf7, 0x0f,
	0x39, 0x80, 0x63, 0x71, 0x6f, 0x46, 0xb3, 0x79, 0x2f, 0x1b, 0xc8, 0xe2, 0x29, 0x44, 0x58, 0x6a,
	0x1a, 0xd8, 0xc3, 0x57, 0xca, 0xcf, 0x93, 0x27, 0xfb, 0x23, 0x7b, 0xea, 0x52, 0xf9, 0xb9, 0x7c,
	0x82, 0x75, 0x8c, 0x25, 0xd6, 0x68, 0x61, 0x2c, 0xe0, 0x4c, 0xc6, 0xae, 0x63, 0x11, 0x7f, 0x39,
	0x53, 0x51, 0x4e, 0x9b, 0x81, 0x45, 0xe8, 0x23, 0x20, 0x56, 0x2a, 0xca, 0xe6, 0x11, 0xb2, 0xfb,
	0xb9, 0x32, 0xde, 0x01, 0x04, 0xe2, 0xf3, 0xbe, 0x67, 0xbc, 0x9c, 0xb2, 0xff, 0x2b, 0x7e, 0x8d,
	0x7f, 0xad, 0xf0, 0x68, 0x99, 0x54, 0x69, 0x7b, 0xea, 0x3f, 0xeb, 0xf6, 0x27, 0x00, 0x00, 0xff,
	0xff, 0xd3, 0x0a, 0xaf, 0xa0, 0x3e, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AlcatrazClient is the client API for Alcatraz service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AlcatrazClient interface {
	UploadFile(ctx context.Context, opts ...grpc.CallOption) (Alcatraz_UploadFileClient, error)
}

type alcatrazClient struct {
	cc grpc.ClientConnInterface
}

func NewAlcatrazClient(cc grpc.ClientConnInterface) AlcatrazClient {
	return &alcatrazClient{cc}
}

func (c *alcatrazClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (Alcatraz_UploadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Alcatraz_serviceDesc.Streams[0], "/pb.Alcatraz/UploadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &alcatrazUploadFileClient{stream}
	return x, nil
}

type Alcatraz_UploadFileClient interface {
	Send(*UploadRequest) error
	CloseAndRecv() (*UploadResponse, error)
	grpc.ClientStream
}

type alcatrazUploadFileClient struct {
	grpc.ClientStream
}

func (x *alcatrazUploadFileClient) Send(m *UploadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *alcatrazUploadFileClient) CloseAndRecv() (*UploadResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AlcatrazServer is the server API for Alcatraz service.
type AlcatrazServer interface {
	UploadFile(Alcatraz_UploadFileServer) error
}

// UnimplementedAlcatrazServer can be embedded to have forward compatible implementations.
type UnimplementedAlcatrazServer struct {
}

func (*UnimplementedAlcatrazServer) UploadFile(srv Alcatraz_UploadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}

func RegisterAlcatrazServer(s *grpc.Server, srv AlcatrazServer) {
	s.RegisterService(&_Alcatraz_serviceDesc, srv)
}

func _Alcatraz_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AlcatrazServer).UploadFile(&alcatrazUploadFileServer{stream})
}

type Alcatraz_UploadFileServer interface {
	SendAndClose(*UploadResponse) error
	Recv() (*UploadRequest, error)
	grpc.ServerStream
}

type alcatrazUploadFileServer struct {
	grpc.ServerStream
}

func (x *alcatrazUploadFileServer) SendAndClose(m *UploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *alcatrazUploadFileServer) Recv() (*UploadRequest, error) {
	m := new(UploadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Alcatraz_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Alcatraz",
	HandlerType: (*AlcatrazServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadFile",
			Handler:       _Alcatraz_UploadFile_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "alcatraz.proto",
}
