// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/avalchev94/alcatraz/pb (interfaces: Alcatraz_UploadFileServer)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	pb "github.com/avalchev94/alcatraz/pb"
	gomock "github.com/golang/mock/gomock"
	empty "github.com/golang/protobuf/ptypes/empty"
	metadata "google.golang.org/grpc/metadata"
)

// MockAlcatraz_UploadFileServer is a mock of Alcatraz_UploadFileServer interface
type MockAlcatraz_UploadFileServer struct {
	ctrl     *gomock.Controller
	recorder *MockAlcatraz_UploadFileServerMockRecorder
}

// MockAlcatraz_UploadFileServerMockRecorder is the mock recorder for MockAlcatraz_UploadFileServer
type MockAlcatraz_UploadFileServerMockRecorder struct {
	mock *MockAlcatraz_UploadFileServer
}

// NewMockAlcatraz_UploadFileServer creates a new mock instance
func NewMockAlcatraz_UploadFileServer(ctrl *gomock.Controller) *MockAlcatraz_UploadFileServer {
	mock := &MockAlcatraz_UploadFileServer{ctrl: ctrl}
	mock.recorder = &MockAlcatraz_UploadFileServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAlcatraz_UploadFileServer) EXPECT() *MockAlcatraz_UploadFileServerMockRecorder {
	return m.recorder
}

// Context mocks base method
func (m *MockAlcatraz_UploadFileServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockAlcatraz_UploadFileServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockAlcatraz_UploadFileServer)(nil).Context))
}

// Recv mocks base method
func (m *MockAlcatraz_UploadFileServer) Recv() (*pb.UploadRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*pb.UploadRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockAlcatraz_UploadFileServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockAlcatraz_UploadFileServer)(nil).Recv))
}

// RecvMsg mocks base method
func (m *MockAlcatraz_UploadFileServer) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockAlcatraz_UploadFileServerMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockAlcatraz_UploadFileServer)(nil).RecvMsg), arg0)
}

// SendAndClose mocks base method
func (m *MockAlcatraz_UploadFileServer) SendAndClose(arg0 *empty.Empty) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAndClose", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAndClose indicates an expected call of SendAndClose
func (mr *MockAlcatraz_UploadFileServerMockRecorder) SendAndClose(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAndClose", reflect.TypeOf((*MockAlcatraz_UploadFileServer)(nil).SendAndClose), arg0)
}

// SendHeader mocks base method
func (m *MockAlcatraz_UploadFileServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader
func (mr *MockAlcatraz_UploadFileServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockAlcatraz_UploadFileServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method
func (m *MockAlcatraz_UploadFileServer) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockAlcatraz_UploadFileServerMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockAlcatraz_UploadFileServer)(nil).SendMsg), arg0)
}

// SetHeader mocks base method
func (m *MockAlcatraz_UploadFileServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader
func (mr *MockAlcatraz_UploadFileServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockAlcatraz_UploadFileServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method
func (m *MockAlcatraz_UploadFileServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer
func (mr *MockAlcatraz_UploadFileServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockAlcatraz_UploadFileServer)(nil).SetTrailer), arg0)
}
